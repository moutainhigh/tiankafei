package ${package.ServiceImpl};

import com.baomidou.mybatisplus.core.conditions.query.LambdaQueryWrapper;
import com.baomidou.mybatisplus.core.metadata.IPage;
import com.baomidou.mybatisplus.core.metadata.OrderItem;
import com.baomidou.mybatisplus.extension.plugins.pagination.Page;
import com.google.common.collect.Lists;
import java.io.Serializable;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import java.util.stream.Collectors;
import org.apache.commons.collections4.CollectionUtils;
import org.apache.commons.lang3.StringUtils;
import org.springframework.beans.BeanUtils;
import org.springframework.beans.factory.annotation.Autowired;
import ${package.Entity}.${entity};
import ${cfg.paramPackage}.${cfg.get(${table.name}).checkParamClassName};
import ${cfg.paramPackage}.${cfg.get(${table.name}).countParamClassName};
import ${cfg.paramPackage}.${cfg.get(${table.name}).deleteParamClassName};
import ${cfg.paramPackage}.${cfg.get(${table.name}).pageParamClassName};
import ${cfg.paramPackage}.${cfg.get(${table.name}).listParamClassName};
import ${cfg.voPackage}.${cfg.get(${table.name}).voClassName};
import ${package.Mapper}.${table.mapperName};
import ${package.Service}.${table.serviceName};
import ${superServiceImplClassPackage};
import org.springframework.stereotype.Service;
import ${cfg.pageClassPath};

/**
 * <p>
 * $!{table.comment} 服务实现类
 * </p>
 *
 * @author ${author}
 * @since 1.0
 */
@Service
#if(${kotlin})
open class ${table.serviceImplName} : ${superServiceImplClass}<${table.mapperName}, ${entity}>(), ${table.serviceName} {

}
#else
public class ${table.serviceImplName} extends ${superServiceImplClass}<${table.mapperName}, ${entity}> implements ${table.serviceName} {

    @Autowired
    private ${table.mapperName} ${cfg.get(${table.name}).mapperConstName};


    /**
     * 校验 $!{table.comment} 是否已经存在
     *
     * @param ${cfg.get(${table.name}).checkParamConstName}
     * @return
     * @throws Exception
     */
	@Override
    public boolean check${table.serviceName}Exists(${cfg.get(${table.name}).checkParamClassName} ${cfg.get(${table.name}).checkParamConstName}) throws Exception {
		LambdaQueryWrapper<${entity}> lambdaQueryWrapper = new LambdaQueryWrapper();
		if (${cfg.get(${table.name}).checkParamConstName} != null) {

		}
		int count = super.count(lambdaQueryWrapper);
		return count > 0;
	}

    /**
     * 保存 $!{table.comment}
     *
     * @param ${cfg.get(${table.name}).voConstName}
     * @return
     * @throws Exception
     */
	@Override
    public Object add${table.serviceName}(${cfg.get(${table.name}).voClassName} ${cfg.get(${table.name}).voConstName}) throws Exception {
		${entity} ${cfg.get(${table.name}).entityConstName} = new ${entity}();
		BeanUtils.copyProperties(${cfg.get(${table.name}).voConstName}, ${cfg.get(${table.name}).entityConstName});
		super.save(${cfg.get(${table.name}).entityConstName});
		return ${cfg.get(${table.name}).entityConstName}.getId();
	}

    /**
     * 保存 $!{table.comment} 集合
     *
     * @param ${cfg.get(${table.name}).voConstName}List
     * @return
     * @throws Exception
     */
	@Override
    public List<Object> batchAdd${table.serviceName}(List<${cfg.get(${table.name}).voClassName}> ${cfg.get(${table.name}).voConstName}List) throws Exception {
		if (CollectionUtils.isNotEmpty(${cfg.get(${table.name}).voConstName}List)) {
			List<${entity}> ${cfg.get(${table.name}).entityConstName}List = new ArrayList<>();
			for (${cfg.get(${table.name}).voClassName} ${cfg.get(${table.name}).voConstName} : ${cfg.get(${table.name}).voConstName}List) {
				${entity} ${cfg.get(${table.name}).entityConstName} = new ${entity}();
				BeanUtils.copyProperties(${cfg.get(${table.name}).voConstName}, ${cfg.get(${table.name}).entityConstName});
				${cfg.get(${table.name}).entityConstName}List.add(${cfg.get(${table.name}).entityConstName});
			}
			super.saveBatch(${cfg.get(${table.name}).entityConstName}List);

			return ${cfg.get(${table.name}).entityConstName}List.stream().map(${cfg.get(${table.name}).entityConstName} -> ${cfg.get(${table.name}).entityConstName}.getId()).collect(Collectors.toList());
		}
		return Lists.newArrayList();
	}

    /**
     * 删除 $!{table.comment}
     *
     * @param id
     * @return
     * @throws Exception
     */
	@Override
    public boolean delete${table.serviceName}(String id) throws Exception {
		if(StringUtils.isNotBlank(id)){
			return super.removeById(id);
		}
		return Boolean.TRUE;
	}
	
    /**
     * 删除 $!{table.comment}
     *
     * @param ids
     * @return
     * @throws Exception
     */
	@Override
    public boolean batchDelete${table.serviceName}(String ids) throws Exception {
		if(StringUtils.isNotBlank(ids)){
			List<String> idList = Arrays.asList(ids.split(","));
			return super.removeByIds(idList);
		}
		return Boolean.TRUE;
	}

    /**
     * 根据条件删除 $!{table.comment}
     *
     * @param ${cfg.get(${table.name}).deleteParamConstName}
     * @return
     * @throws Exception
     */
	@Override
    public boolean conditionDelete${table.serviceName}(${cfg.get(${table.name}).deleteParamClassName} ${cfg.get(${table.name}).deleteParamConstName}) throws Exception {
		LambdaQueryWrapper<${entity}> lambdaQueryWrapper = new LambdaQueryWrapper();
		if (${cfg.get(${table.name}).deleteParamConstName} != null) {

		}
		return super.remove(lambdaQueryWrapper);
	}

    /**
     * 修改 $!{table.comment}
     *
     * @param ${cfg.get(${table.name}).voConstName}
     * @return
     * @throws Exception
     */
	@Override
    public boolean update${table.serviceName}(${cfg.get(${table.name}).voClassName} ${cfg.get(${table.name}).voConstName}) throws Exception {
		${entity} ${cfg.get(${table.name}).entityConstName} = new ${entity}();
		BeanUtils.copyProperties(${cfg.get(${table.name}).voConstName}, ${cfg.get(${table.name}).entityConstName});
		return super.updateById(${cfg.get(${table.name}).entityConstName});
	}

    /**
     * 根据ID获取 $!{table.comment} 对象
     *
     * @param id
     * @return
     * @throws Exception
     */
	@Override
    public ${cfg.get(${table.name}).voClassName} get${table.serviceName}ById(Serializable id) throws Exception {
		${entity} ${cfg.get(${table.name}).entityConstName} = super.getById(id);
		${cfg.get(${table.name}).voClassName} ${cfg.get(${table.name}).voConstName} = new ${cfg.get(${table.name}).voClassName}();
		BeanUtils.copyProperties(${cfg.get(${table.name}).entityConstName}, ${cfg.get(${table.name}).voConstName});
		return ${cfg.get(${table.name}).voConstName};
	}

    /**
     * 获取 $!{table.comment} 对象列表
     *
     * @param ${cfg.get(${table.name}).listParamConstName}
     * @return
     * @throws Exception
     */
	@Override
    public List<${entity}> get${table.serviceName}List(${cfg.get(${table.name}).listParamClassName} ${cfg.get(${table.name}).listParamConstName}) throws Exception {
		LambdaQueryWrapper<${entity}> lambdaQueryWrapper = new LambdaQueryWrapper();
		if (${cfg.get(${table.name}).listParamConstName} != null) {

		}
		return super.list(lambdaQueryWrapper);
	}

    /**
     * 获取 $!{table.comment} 分页对象列表
     *
     * @param ${cfg.get(${table.name}).pageParamConstName}
     * @return
     * @throws Exception
     */
	@Override
    public Paging<${cfg.get(${table.name}).voClassName}> get${table.serviceName}PageList(${cfg.get(${table.name}).pageParamClassName} ${cfg.get(${table.name}).pageParamConstName}) throws Exception {
		Page page = setPageParam(${cfg.get(${table.name}).pageParamConstName}, OrderItem.desc("create_time"));
		LambdaQueryWrapper<${entity}> lambdaQueryWrapper = new LambdaQueryWrapper();
		IPage<${cfg.get(${table.name}).voClassName}> iPage = super.page(page, lambdaQueryWrapper);
		return new Paging(iPage);
	}

    /**
     * 计算 $!{table.comment} 总记录数
     *
     * @param ${cfg.get(${table.name}).countParamConstName}
     * @return
     * @throws Exception
     */
	@Override
    public Integer count${table.serviceName}(${cfg.get(${table.name}).countParamClassName} ${cfg.get(${table.name}).countParamConstName}) throws Exception {
		LambdaQueryWrapper<${entity}> lambdaQueryWrapper = new LambdaQueryWrapper();
		if (${cfg.get(${table.name}).countParamConstName} != null) {

		}
		return super.count(lambdaQueryWrapper);
	}
	

}
#end
