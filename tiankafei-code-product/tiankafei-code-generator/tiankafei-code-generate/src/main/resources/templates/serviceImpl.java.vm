package $!{package.ServiceImpl};

import com.baomidou.mybatisplus.core.conditions.query.LambdaQueryWrapper;
import org.tiankafei.web.common.constants.CommonConstant;
import $!{package.Entity}.$!{cfg.entityClassName};
import $!{package.Mapper}.$!{table.mapperName};
import $!{package.Service}.$!{table.serviceName};
import $!{cfg.queryParamPath};
import $!{cfg.pageQueryParamPath};
import $!{cfg.queryVoPath};
import $!{superServiceImplClassPackage};
import $!{cfg.paging};
import java.util.List;
import java.util.ArrayList;
import java.util.Arrays;
import lombok.extern.slf4j.Slf4j;
import org.springframework.beans.BeanUtils;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.beans.factory.annotation.Autowired;

import com.baomidou.mybatisplus.core.metadata.IPage;
import com.baomidou.mybatisplus.core.metadata.OrderItem;
import com.baomidou.mybatisplus.extension.plugins.pagination.Page;

import java.io.Serializable;

/**
 * <pre>
 * $!{table.comment} 服务实现类
 * </pre>
 *
 * @author $!{author}
 * @since 1.0
 */
@Slf4j
@Service
@Transactional(rollbackFor = Exception.class)
public class $!{table.serviceImplName} extends BaseServiceImpl<$!{table.mapperName}, $!{cfg.entityClassName}> implements $!{table.serviceName} {

    @Autowired
    private $!{table.mapperName} $!{cfg.mapperObjectName};

    @Override
    public boolean check$!{cfg.TableName}Exists($!{cfg.TableName}QueryParam $!{cfg.tableName}QueryParam) throws Exception {
        LambdaQueryWrapper<$!{cfg.entityClassName}> lambdaQueryWrapper = new LambdaQueryWrapper();
        int count = super.count(lambdaQueryWrapper);
        return count > 0;
    }

    @Override
    public Object add$!{cfg.TableName}($!{cfg.TableName}QueryVo $!{cfg.tableName}QueryVo) throws Exception {
        $!{cfg.entityClassName} $!{cfg.entityObjectName} = new $!{cfg.entityClassName}();
        BeanUtils.copyProperties($!{cfg.tableName}QueryVo, $!{cfg.entityObjectName});
        super.save($!{cfg.entityObjectName});
        return $!{cfg.entityObjectName}.getId();
    }

    @Override
    public boolean add$!{cfg.TableName}List(List<$!{cfg.TableName}QueryVo> $!{cfg.tableName}QueryVoList) throws Exception {
        if ($!{cfg.tableName}QueryVoList != null && !$!{cfg.tableName}QueryVoList.isEmpty()) {
            List<$!{cfg.entityClassName}> $!{cfg.tableName}List = new ArrayList<>();
            for ($!{cfg.TableName}QueryVo $!{cfg.tableName}QueryVo : $!{cfg.tableName}QueryVoList) {
                $!{cfg.entityClassName} $!{cfg.entityObjectName} = new $!{cfg.entityClassName}();
                BeanUtils.copyProperties($!{cfg.tableName}QueryVo, $!{cfg.entityObjectName});
                $!{cfg.tableName}List.add($!{cfg.entityObjectName});
            }
            super.saveBatch($!{cfg.tableName}List, CommonConstant.BATCH_SAVE_COUNT);
        }
        return Boolean.TRUE;
    }

    @Override
    public boolean update$!{cfg.TableName}($!{cfg.TableName}QueryVo $!{cfg.tableName}QueryVo) throws Exception {
        $!{cfg.entityClassName} $!{cfg.entityObjectName} = new $!{cfg.entityClassName}();
        BeanUtils.copyProperties($!{cfg.tableName}QueryVo, $!{cfg.entityObjectName});
        return super.updateById($!{cfg.entityObjectName});
    }

    @Override
    public boolean delete$!{cfg.TableName}(String ids) throws Exception {
        String[] idArray = ids.split(",");
        return super.removeByIds(Arrays.asList(idArray));
    }

    @Override
    public boolean delete$!{cfg.TableName}($!{cfg.TableName}QueryParam $!{cfg.tableName}QueryParam) throws Exception {
        LambdaQueryWrapper<$!{cfg.entityClassName}> lambdaQueryWrapper = new LambdaQueryWrapper();

        return super.remove(lambdaQueryWrapper);
    }

    @Override
    public $!{cfg.TableName}QueryVo get$!{cfg.TableName}ById(Serializable id) throws Exception {
		//$!{cfg.TableName}QueryVo $!{cfg.tableName}QueryVo = $!{cfg.mapperObjectName}.get$!{cfg.TableName}ById(id);

        $!{cfg.entityClassName} $!{cfg.entityObjectName} = super.getById(id);
        $!{cfg.TableName}QueryVo $!{cfg.tableName}QueryVo = new $!{cfg.TableName}QueryVo();
        BeanUtils.copyProperties($!{cfg.entityObjectName}, $!{cfg.tableName}QueryVo);
        return $!{cfg.tableName}QueryVo;
    }

    @Override
    public Paging<$!{cfg.TableName}QueryVo> get$!{cfg.TableName}PageList($!{cfg.TableName}PageQueryParam $!{cfg.tableName}PageQueryParam) throws Exception {
        //IPage<$!{cfg.TableName}QueryVo> iPage = $!{cfg.mapperObjectName}.get$!{cfg.TableName}PageList(page, $!{cfg.tableName}PageQueryParam);

		Page page = setPageParam($!{cfg.tableName}PageQueryParam, OrderItem.desc("create_time"));
        LambdaQueryWrapper<$!{cfg.entityClassName}> lambdaQueryWrapper = new LambdaQueryWrapper();
        IPage<$!{cfg.TableName}QueryVo> iPage = super.page(page, lambdaQueryWrapper);
        return new Paging(iPage);
    }

    @Override
    public List<$!{cfg.TableName}QueryVo> get$!{cfg.TableName}List($!{cfg.TableName}QueryParam $!{cfg.tableName}QueryParam) throws Exception {
        List<$!{cfg.TableName}QueryVo> $!{cfg.tableName}QueryVoList = $!{cfg.mapperObjectName}.get$!{cfg.TableName}List($!{cfg.tableName}QueryParam);
        return $!{cfg.tableName}QueryVoList;
    }

    @Override
    public int count$!{cfg.TableName}($!{cfg.TableName}QueryParam $!{cfg.tableName}QueryParam) throws Exception {
        LambdaQueryWrapper<$!{cfg.entityClassName}> lambdaQueryWrapper = new LambdaQueryWrapper();
        int count = super.count(lambdaQueryWrapper);
        return count;
    }

}